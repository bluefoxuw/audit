#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#define MAX_COMMAND_LENGTH 1024
#define MAX_ARGS 64
#define MAX_PATH_LENGTH 1024
#define MAX_FILENAME_LENGTH 256
void search_first(char * pattern, char * filename);
int search_count(char * pattern, char * filename);
void search_all(char * pattern, char * filename);
int main(int argc, char * argv[]) {
char command[MAX_COMMAND_LENGTH];
char * args[MAX_ARGS];
char * token;
char * prompt = "NewShell$ ";
int status;
while (1) {
printf("%s", prompt);
fgets(command, MAX_COMMAND_LENGTH, stdin);
// Remove newline character from command string
command[strcspn(command, "\n")] = '\0';
// Parse command into arguments
int arg_count = 0;
token = strtok(command, " ");
while (token != NULL && arg_count < MAX_ARGS - 1) {
args[arg_count] = token;
token = strtok(NULL, " ");
arg_count++;
}
args[arg_count] = NULL;
// Check for built-in commands
if (strcmp(args[0], "search") == 0 && arg_count == 4) {
char * search_type = args[1];
char * pattern = args[2];
char * filename = args[3];
if (strcmp(search_type, "f") == 0) {
search_first(pattern, filename);
} else if (strcmp(search_type, "c") == 0) {
search_count(pattern, filename);
} else if (strcmp(search_type, "a") == 0) {
search_all(pattern, filename);
} else {
printf("Unknown search type: %s\n", search_type);
}
} else if (strcmp(args[0], "exit") == 0) {
exit(0);
} else {
// Execute external command
pid_t pid = fork();
if (pid == 0) {
// Child process
execvp(args[0], args);
perror("execvp");
exit(1);
} else if (pid < 0) {
perror("fork");
exit(1);
} else {
// Parent process
waitpid(pid, & status, 0);
}
}
}
}
void search_first(char * pattern, char * filename) {
FILE * fp = fopen(filename, "r");
if (fp == NULL) {
perror("fopen");
return;
}
char * line = NULL;
size_t len = 0;
ssize_t read;
int line_num = 1;
while ((read = getline( & line, & len, fp)) != -1) {
if (strstr(line, pattern) != NULL) {
printf("%s (line %d)\n", filename, line_num);
free(line);
fclose(fp);
return;
}
line_num++;
}
printf("Pattern not found in file: %s\n", filename);
free(line);
fclose(fp);
}
// Function to count the number of occurrences of a pattern in a file
int search_count(char * pattern, char * filename) {
FILE * fp = fopen(filename, "r");
if (fp == NULL) {
perror("fopen");
return -1;
}
int count = 0;
char buffer[BUFSIZ];
while (fgets(buffer, BUFSIZ, fp) != NULL) {
char * pos = strstr(buffer, pattern);
while (pos != NULL) {
count++;
pos = strstr(pos + 1, pattern);
}
}
fclose(fp);
return count;
}
// Function to print all occurrences of a pattern in a file
void search_all(char * pattern, char * filename) {
FILE * fp = fopen(filename, "r");
if (fp == NULL) {
perror("fopen");
return;
}
char buffer[BUFSIZ];
while (fgets(buffer, BUFSIZ, fp) != NULL) {
char * pos = strstr(buffer, pattern);
while (pos != NULL) {
printf("%s", buffer);
pos = strstr(pos + 1, pattern);
}
}
fclose(fp);
}
