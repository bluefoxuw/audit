#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#define MAX_COMMAND_LENGTH 1024
#define MAX_ARGS 64
#define MAX_PATH_LENGTH 1024
#define MAX_FILENAME_LENGTH 256
#define MAX_LINE_LENGTH 2048
void print_first_n_lines(char * filename, int n);
void print_last_n_lines(char * filename, int n);
void print_all_lines(char * filename);
int main(int argc, char * argv[]) {
char command[MAX_COMMAND_LENGTH];
char * args[MAX_ARGS];
char * token;
char * prompt = "NewShell$ ";
int status;
while (1) {
printf("%s", prompt);
fgets(command, MAX_COMMAND_LENGTH, stdin);
// Remove newline character from command string
command[strcspn(command, "\n")] = '\0';
// Parse command into arguments
int arg_count = 0;
token = strtok(command, " ");
while (token != NULL && arg_count < MAX_ARGS - 1) {
args[arg_count] = token;
token = strtok(NULL, " ");
arg_count++;
}
args[arg_count] = NULL;
// Check for built-in commands
if (strcmp(args[0], "typeline") == 0 && arg_count >= 3) {
char * line_count_str = args[1];
char * filename = args[2];
int line_count = atoi(line_count_str);
if (line_count > 0) {
print_first_n_lines(filename, line_count);
} else if (line_count < 0) {
print_last_n_lines(filename, -line_count);
} else if (strcmp(line_count_str, "a") == 0) {
print_all_lines(filename);
} else {
printf("Unknown line count: %s\n", line_count_str);
}
} else if (strcmp(args[0], "exit") == 0) {
exit(0);
} else {
// Execute external command
pid_t pid = fork();
if (pid == 0) {
// Child process
execvp(args[0], args);
perror("execvp");
exit(1);
} else if (pid < 0) {
perror("fork");
exit(1);
} else {
// Parent process
waitpid(pid, & status, 0);
}
}
}
}
void print_first_n_lines(char * filename, int n) {
FILE * file = fopen(filename, "r");
if (file == NULL) {
perror("fopen");
return;
}
char line[MAX_LINE_LENGTH];
int line_num = 0;
while (fgets(line, MAX_LINE_LENGTH, file) != NULL && line_num < n) {
printf("%s", line);
line_num++;
}
fclose(file);
}
void print_last_n_lines(char * filename, int n) {
FILE * file = fopen(filename, "r");
if (file == NULL) {
perror("fopen");
return;
}
char buffer[MAX_LINE_LENGTH];
int line_count = 0;
int i = 0;
while (fgets(buffer, MAX_LINE_LENGTH, file) != NULL) {
line_count++;
}
rewind(file);
while (fgets(buffer, MAX_LINE_LENGTH, file) != NULL) {
if (line_count <= n || i >= line_count - n) {
printf("%s", buffer);
}
i++;
}
fclose(file);
}
void print_all_lines(char * filename) {
FILE * file = fopen(filename, "r");
if (file == NULL) {
perror("fopen");
return;
}
char line[MAX_LINE_LENGTH];
while (fgets(line, MAX_LINE_LENGTH, file) != NULL) {
printf("%s", line);
}
fclose(file);
}
