#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#define BUFFER_SIZE 1024
int main() {
int fd[2]; // file descriptors for the pipe
pid_t pid; // process ID
char parent_message[] = "hello from parent!";
char child_message[] = "hello from child!";
char buffer[BUFFER_SIZE];
// CREATE PIPE
if (pipe(fd) < 0) {
perror("pipe error");
exit(1);
}
pid = fork();
if (pid < 0) {
perror("fork error");
exit(1);
} else if (pid == 0) {
// CHILD PROCESS
close(fd[1]); // close the write end of the pipe
if (read(fd[0], buffer, BUFFER_SIZE) < 0) {
perror("read error");
exit(1);
}
printf("child read from pipe: %s\n", buffer);
close(fd[0]); // close the read end of the pipe
} else {
// PARENT PROCESS
close(fd[0]); // close the read end of the pipe
if (write(fd[1], parent_message, strlen(parent_message) + 1) < 0) {
perror("write error");
exit(1);
}
printf("parent wrote to pipe: %s\n", parent_message);
close(fd[1]); // close the write end of the pipe
}
return 0;
}
