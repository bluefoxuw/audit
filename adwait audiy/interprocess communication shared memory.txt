#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#define SHM_SIZE 1024
int main() {
int shmid;
key_t key;
char * shm;
char * s;
key = 1234; // unique key for the shared memory segment
// create a shared memory segment
if ((shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666)) < 0) {
perror("shmget");
exit(1);
}
// attach the shared memory segment to our process's address space
if ((shm = shmat(shmid, NULL, 0)) == (char * ) - 1) {
perror("shmat");
exit(1);
}
// write some data to the shared memory segment
s = shm;
for (char c = 'a'; c <= 'z'; c++) {
* s++ = c;
}
* s = '\0';
// detach the shared memory segment from our process's address space
if (shmdt(shm) == -1) {
perror("shmdt");
exit(1);
}
// read the data from the shared memory segment in a separate process
pid_t pid = fork();
if (pid == 0) {
// child process
if ((shm = shmat(shmid, NULL, 0)) == (char * ) - 1) {
perror("shmat");
exit(1);
}
printf("Data read from shared memory: %s\n", shm);
if (shmdt(shm) == -1) {
perror("shmdt");
exit(1);
}
exit(0);
} else if (pid > 0) {
// parent process
wait(NULL); // wait for the child process to complete
} else {
// error
perror("fork");
exit(1);
}
// delete the shared memory segment
if (shmctl(shmid, IPC_RMID, NULL) == -1) {
perror("shmctl");
exit(1);
}
return 0;
}