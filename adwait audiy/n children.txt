#include<stdio.h>
#include<stdlib.h>
#include<sys/time.h>
#include<sys/resource.h>
#include<sys/wait.h>
#include<unistd.h>
int main(int argc, char **argv){
int n = atoi(argv[1]);
int i,status;
pid_t pid;
struct rusage r_usage;
struct timeval user_time,kernel_time;
long total_user_usec = 0;
long total_kernel_usec = 0;
for(i=0;i<n;i++){
pid = fork();
if(pid<0){
perror("fork error");
exit(1);
}
else if(pid==0){
printf("child %d started\n",i+1);
sleep(5);
printf("child %d finished\n",i+1);
exit(0);
}
}
while((pid= wait(&status))>0){
if(getrusage(RUSAGE_CHILDREN,&r_usage)<0){
perror("getrusage error");
exit(1);
}
user_time = r_usage.ru_utime;
kernel_time = r_usage.ru_stime;
printf("child %d : user time : %ld microseconds, kernel time : %ld
microseconds.\n",pid,user_time.tv_usec,kernel_time.tv_usec);
total_user_usec += user_time.tv_usec;
total_kernel_usec +=kernel_time.tv_usec;
}
printf("total time spent : %ld\n",total_user_usec);
printf("total time spent(kernel) : %ld\n",total_kernel_usec);
return 0;
}
