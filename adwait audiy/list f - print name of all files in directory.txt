#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <sys/stat.h>
#include <fcntl.h>
#define MAX_COMMAND_LENGTH 1024
#define MAX_ARGS 64
#define MAX_PATH_LENGTH 1024
#define MAX_FILENAME_LENGTH 256
void print_file_names(char * dirname);
void print_entry_count(char * dirname);
void print_file_info(char * dirname);
int main(int argc, char * argv[]) {
char command[MAX_COMMAND_LENGTH];
char * args[MAX_ARGS];
char * token;
char * prompt = "NewShell$ ";
int status;
while (1) {
printf("%s", prompt);
fgets(command, MAX_COMMAND_LENGTH, stdin);
// Remove newline character from command string
command[strcspn(command, "\n")] = '\0';
// Parse command into arguments
int arg_count = 0;
token = strtok(command, " ");
while (token != NULL && arg_count < MAX_ARGS - 1) {
args[arg_count] = token;
token = strtok(NULL, " ");
arg_count++;
}
args[arg_count] = NULL;
// Check for built-in commands
if (strcmp(args[0], "list") == 0 && arg_count >= 3) {
char * list_type = args[1];
char * dirname = args[2];
if (strcmp(list_type, "f") == 0) {
print_file_names(dirname);
} else if (strcmp(list_type, "n") == 0) {
print_entry_count(dirname);
} else if (strcmp(list_type, "i") == 0) {
print_file_info(dirname);
} else {
printf("Unknown list type: %s\n", list_type);
}
} else if (strcmp(args[0], "exit") == 0) {
exit(0);
} else {
// Execute external command
pid_t pid = fork();
if (pid == 0) {
// Child process
execvp(args[0], args);
perror("execvp");
exit(1);
} else if (pid < 0) {
perror("fork");
exit(1);
} else {
// Parent process
waitpid(pid, & status, 0);
}
}
}
}
void print_file_names(char * dirname) {
DIR * dirp = opendir(dirname);
if (dirp == NULL) {
perror("opendir");
return;
}
struct dirent * dirent;
while ((dirent = readdir(dirp)) != NULL) {
if (dirent -> d_type == DT_REG) {
printf("%s\n", dirent -> d_name);
}
}
closedir(dirp);
}
void print_entry_count(char * dirname) {
DIR * dirp = opendir(dirname);
if (dirp == NULL) {
perror("opendir");
return;
}
int count = 0;
struct dirent * dirent;
while ((dirent = readdir(dirp)) != NULL) {
count++;
}
printf("%d\n", count);
closedir(dirp);
}
void print_file_info(char * dirname) {
DIR * dirp = opendir(dirname);
if (dirp == NULL) {
perror("opendir");
return;
}
struct dirent * dirent;
while ((dirent = readdir(dirp)) != NULL) {
if (dirent -> d_type == DT_REG) {
char filename[MAX_FILENAME_LENGTH];
strcpy(filename, dirname);
strcat(filename, "/");
strcat(filename, dirent -> d_name);
struct stat file_stat;
if (stat(filename, & file_stat) == -1) {
perror("stat");
} else {
printf("%s %ld\n", dirent -> d_name, file_stat.st_ino);
}
}
}
closedir(dirp);
}
