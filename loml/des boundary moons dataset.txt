import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_moons
from sklearn.neural_network import MLPClassifier

# Generate the two moons dataset
X, y = make_moons(n_samples=200, noise=0.3, random_state=42)

# Create a neural network classifier with 10 hidden units
clf = MLPClassifier(hidden_layer_sizes=(10,), activation='relu', max_iter=1000, random_state=42)

# Train the classifier on the data
clf.fit(X, y)

# Create a meshgrid for plotting the decision boundary
xx, yy = np.meshgrid(np.linspace(X[:, 0].min() - 0.5, X[:, 0].max() + 0.5, 100),
                     np.linspace(X[:, 1].min() - 0.5, X[:, 1].max() + 0.5, 100))

# Predict the class labels for the meshgrid points
Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Plot the decision boundary
plt.contourf(xx, yy, Z, cmap=plt.cm.RdBu, alpha=0.8)
plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.RdBu, edgecolors='k')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Decision Boundary by Neural Network with 10 Hidden Units')
plt.show()
