#include <stdio.h>
#include <stdlib.h>

#define INPUT_SIZE 3
#define LEARNING_RATE 0.1
#define EPOCHS 100

int activation(double x) {
    // Step function as the activation function
    if (x >= 0)
        return 1;
    else
        return 0;
}

void perceptron_learning_rule(double input[][INPUT_SIZE], int target[], double weights[]) {
    int epoch, i, j, output, error, sum;
    double delta;

    for (epoch = 0; epoch < EPOCHS; epoch++) {
        error = 0;

        for (i = 0; i < INPUT_SIZE; i++) {
            sum = 0;

            for (j = 0; j < INPUT_SIZE; j++) {
                sum += input[i][j] * weights[j];
            }

            output = activation(sum);

            delta = target[i] - output;

            if (delta != 0) {
                error = 1;

                for (j = 0; j < INPUT_SIZE; j++) {
                    weights[j] += LEARNING_RATE * delta * input[i][j];
                }
            }
        }

        if (error == 0) {
            printf("Converged at epoch %d\n", epoch + 1);
            break;
        }
    }

    if (epoch == EPOCHS)
        printf("Did not converge within the given epochs\n");

    printf("Final Weights: ");
    for (i = 0; i < INPUT_SIZE; i++) {
        printf("%.2f ", weights[i]);
    }
    printf("\n");
}

int main() {
    double input[][INPUT_SIZE] = {
        {0, 0, 1},
        {0, 1, 1},
        {1, 0, 1},
        {1, 1, 1}
    };

    int target[] = {0, 0, 0, 1};

    double weights[INPUT_SIZE] = {0};

    perceptron_learning_rule(input, target, weights);

    return 0;
}
