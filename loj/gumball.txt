// GumballMachine class using the State Pattern
public class GumballMachine {
    // Different possible states
    private State hasQuarterState;
    private State noQuarterState;
    private State soldState;

    // Current state variable
    private State currentState;

    // Number of gumballs in the machine
    private int count;

    public GumballMachine(int numberOfGumballs) {
        hasQuarterState = new HasQuarterState(this);
        noQuarterState = new NoQuarterState(this);
        soldState = new SoldState(this);

        // Initialize with no quarters
        currentState = noQuarterState;
        count = numberOfGumballs;
    }

    // Setters and getters for states
    public void setHasQuarterState() {
        currentState = hasQuarterState;
    }

    public void setNoQuarterState() {
        currentState = noQuarterState;
    }

    public void setSoldState() {
        currentState = soldState;
    }

    public State getHasQuarterState() {
        return hasQuarterState;
    }

    public State getNoQuarterState() {
        return noQuarterState;
    }

    public State getSoldState() {
        return soldState;
    }

    public int getCount() {
        return count;
    }

    // Methods to handle actions and state transitions
    public void insertQuarter() {
        currentState.insertQuarter();
    }

    public void ejectQuarter() {
        currentState.ejectQuarter();
    }

    public void turnCrank() {
        currentState.turnCrank();
        currentState.dispense();
    }

    public void releaseBall() {
        System.out.println("A gumball comes rolling out of the machine.");
        if (count != 0) {
            count--;
        }
    }

    public void refill(int numberOfGumballs) {
        count = numberOfGumballs;
        currentState = noQuarterState;
    }

    public String display() {
        return currentState.toString();
    }
}

// State interface
interface State {
    void insertQuarter();
    void ejectQuarter();
    void turnCrank();
    void dispense();
}

// Concrete implementation of HasQuarterState
class HasQuarterState implements State {
    private GumballMachine gumballMachine;

    public HasQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You can't insert another quarter");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Quarter returned");
        gumballMachine.setNoQuarterState();
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned the crank");
        gumballMachine.setSoldState();
    }

    @Override
    public void dispense() {
        System.out.println("No gumball dispensed");
    }

    @Override
    public String toString() {
        return "Waiting for turn of crank";
    }
}

// Concrete implementation of NoQuarterState
class NoQuarterState implements State {
    private GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("You inserted a quarter");
        gumballMachine.setHasQuarterState();
    }

    @Override
    public void ejectQuarter() {
        System.out.println("You haven't inserted a quarter");
    }

    @Override
    public void turnCrank() {
        System.out.println("You turned, but there's no quarter");
    }

    @Override
    public void dispense() {
        System.out.println("You need to pay first");
    }

    @Override
    public String toString() {
        return "Waiting for quarter";
    }
}

// Concrete implementation of SoldState
class SoldState implements State {
    private GumballMachine gumballMachine;

    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

    @Override
    public void insertQuarter() {
        System.out.println("Please wait, we're already giving you a gumball");
    }

    @Override
    public void ejectQuarter() {
        System.out.println("Sorry, you already turned the crank");
    }

    @Override
    public void turnCrank() {
        System.out.println("Turning twice doesn't get you another gumball");
    }

    @Override
    public void dispense() {
        gumballMachine.releaseBall();
        if (gumballMachine.getCount() > 0) {
            gumballMachine.setNoQuarterState();
        } else {
            System.out.println("Oops, out of gumballs!");
            gumballMachine.setSoldState();
        }
    }

    @Override
    public String toString() {
        return "Dispensing a gumball";
    }
}

// Client class to test the Gumball Machine
public class StatePatternExample {
    public static void main(String[] args) {
        GumballMachine gumballMachine = new GumballMachine(5);

        System.out.println("Initial State: " + gumballMachine.display());

        // First customer actions
        gumballMachine.insertQuarter();
        gumballMachine.turnCrank();

        System.out.println("Current State: " + gumballMachine.display());

        // Second customer actions
        gumballMachine.insertQuarter();
        gumballMachine.ejectQuarter();
        gumballMachine.turnCrank();

        System.out.println("Current State: " + gumballMachine.display());
    }
}
